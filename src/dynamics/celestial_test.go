package dynamics

import (
	"fmt"
	"math"
	"testing"
	"time"

	"github.com/soniakeys/meeus/julian"
)

func TestCelestialObject(t *testing.T) {
	for _, object := range []CelestialObject{Sun, Earth, Mars} {
		if object.String() != fmt.Sprintf("[Object %s]", object.Name) {
			t.Fatalf("invalid String for %s", object.Name)
		}
		object.HelioOrbit(time.Now())
	}
}

func TestPanics(t *testing.T) {
	assertPanic(t, func() {
		fake := CelestialObject{"Fake", -1, -1, -1, -1, -1, -1}
		fake.HelioOrbit(time.Now())
	})
	assertPanic(t, func() {
		venus := CelestialObject{"Venus", -1, -1, -1, -1, -1, -1}
		venus.HelioOrbit(time.Now())
	})
}

func TestHelio(t *testing.T) {
	dt := time.Now()
	hR1, hV1 := Earth.HelioOrbit(dt)
	hR2, hV2 := Earth.HelioOrbit(dt.Add(time.Duration(1) * time.Minute))
	if math.Abs(norm(hR1)-norm(hR2)) > 1e2 {
		t.Fatal("radius changed by more than 100 km in a minute")
	}
	if math.Abs(norm(hV1)-norm(hV2)) > 1e-4 {
		t.Fatal("velocity changed by more than 1 m/s in a minute")
	}
}

func TestEclipticPosVel(t *testing.T) {
	/*
			2457692.500000000 = A.D. 2016-Oct-31 00:00:00.0000 TDB
		   7.883359146390766E-01  6.115367238510105E-01 -1.883516706483864E-04
		  -1.082353066558846E-02  1.354841368550164E-02 -7.213688837105427E-07
		   5.762366114912937E-03  9.977227643010900E-01 -2.477895676491387E-04
		2457693.500000000 = A.D. 2016-Nov-01 00:00:00.0000 TDB
		   7.773937029561567E-01  6.249919760406664E-01 -1.890099314221751E-04
		  -1.106033483799543E-02  1.336135351366453E-02 -5.932919349986678E-07
		   5.760933988495716E-03  9.974747992986370E-01 -2.481223671987651E-04
		2457694.500000000 = A.D. 2016-Nov-02 00:00:00.0000 TDB
		   7.662163796694402E-01  6.382579724338782E-01 -1.895353551413067E-04
		  -1.129373516473685E-02  1.316991823238498E-02 -4.565240116458564E-07
		   5.759500288889605E-03  9.972265619069720E-01 -2.483281991076556E-04
		2457695.500000000 = A.D. 2016-Nov-03 00:00:00.0000 TDB
		   7.548074033781355E-01  6.513303874116787E-01 -1.899217698096140E-04
		  -1.152362351194053E-02  1.297420786415557E-02 -3.161316121173783E-07
		   5.758065854372506E-03  9.969781972694134E-01 -2.483709740823697E-04
		2457696.500000000 = A.D. 2016-Nov-04 00:00:00.0000 TDB
		   7.431703366972224E-01  6.642049983766642E-01 -1.901681440899035E-04
		  -1.174989997684741E-02  1.277432832053071E-02 -1.773195875012587E-07
		   5.756631727312160E-03  9.967298858663417E-01 -2.482160616822714E-04
		2457697.500000000 = A.D. 2016-Nov-05 00:00:00.0000 TDB
		   7.313088380412328E-01  6.768776914050114E-01 -1.902787033339562E-04
		  -1.197247287165983E-02  1.257039102208391E-02 -4.539399938458450E-08
		   5.755199146832980E-03  9.964818422454976E-01 -2.478298650914515E-04
		2457698.500000000 = A.D. 2016-Nov-06 00:00:00.0000 TDB
		   7.192266533096203E-01  6.893444668089661E-01 -1.902630294366205E-04
		  -1.219125901448825E-02  1.236251309972707E-02  7.423544617841332E-08
		   5.753769544537004E-03  9.962343142810908E-01 -2.471792329025181E-04
		2457699.500000000 = A.D. 2016-Nov-07 00:00:00.0000 TDB
		   7.069276069158539E-01  7.016014451462600E-01 -1.901361726436743E-04
		  -1.240618484223052E-02  1.215081803797305E-02  1.760408524690671E-07
		   5.752344543246947E-03  9.959875829561635E-01 -2.462310815828245E-04
		2457700.500000000 = A.D. 2016-Nov-08 00:00:00.0000 TDB
		   6.944155910688645E-01  7.136448739065939E-01 -1.899187613997987E-04
		  -1.261718887347064E-02  1.193543626886502E-02  2.544068728898364E-07
		   5.750925955939274E-03  9.957419621778599E-01 -2.449528247934993E-04
		2457701.500000000 = A.D. 2016-Nov-09 00:00:00.0000 TDB
		   6.816945517591759E-01  7.254711343940385E-01 -1.896370227647542E-04
		  -1.282422586105109E-02  1.171650477052747E-02  3.037962181573195E-07
		   5.749515777994999E-03  9.954977974356937E-01 -2.433144013325523E-04
		2457702.500000000 = A.D. 2016-Nov-10 00:00:00.0000 TDB
		   6.687684697990327E-01  7.370767471342966E-01 -1.893225235599418E-04
		  -1.302727242420617E-02  1.149416424879458E-02  3.191617787135785E-07
		   5.748116161081847E-03  9.952554612793810E-01 -2.412927323990444E-04
	*/
	type eph struct {
		jde float64
		r   []float64
		v   []float64
	}
	expectations := []eph{
		eph{2457692.500000000,
			[]float64{7.883359146390766E-01, 6.018801632173586E-01, -2.647625466775778E-04},
			[]float64{-1.082353066558846E-02, 1.354841368550164E-02, -7.213688837105427E-07},
		},
	}
	initDT := time.Date(2016, 10, 31, 0, 0, 0, 0, time.UTC)
	exp := expectations[0]
	if ok, err := floatEqual(julian.TimeToJD(initDT), exp.jde); !ok {
		t.Fatalf("invalid JDE conversion from %s (%s)", initDT, err)
	}
	// Convert vectors to km instead of AU.
	for i := 0; i < 3; i++ {
		exp.r[i] *= AU
		exp.v[i] *= AU / (3600 * 24)
	}
	r, v := Earth.HelioOrbit(initDT)
	t.Logf("\n|got| = %+v\n|exp| = %+v", norm(r), norm(exp.r))
	if !vectorsEqual(exp.r, r) {
		//t.Fatalf("incorrect r: \ngot = %+v\nexp = %+v", r, exp.r)
	}
	if !vectorsEqual(exp.v, v) {
		t.Fatalf("incorrect v: \ngot = %+v\nexp = %+v", v, exp.v)
	}
}
